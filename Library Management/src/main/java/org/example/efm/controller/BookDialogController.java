package org.example.efm.controller;

import java.time.LocalDate;

import org.example.efm.model.Book;

import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.CheckBox;
import javafx.scene.control.TextField;

public class BookDialogController {

    @FXML
    private TextField titleField;
    @FXML
    private TextField authorField;
    @FXML
    private TextField isbnField;
    @FXML
    private TextField yearField;
    @FXML
    private CheckBox availableCheckBox;

    private Book currentBook;

    public void setBook(Book book) {
        this.currentBook = book;
        if (book != null) {
            titleField.setText(book.getTitle());
            authorField.setText(book.getAuthor());
            isbnField.setText(book.getIsbn());
            yearField.setText(String.valueOf(book.getYear()));
            availableCheckBox.setSelected(book.isAvailable());
        } else {
            // For new book, clear fields (or set defaults)
            titleField.clear();
            authorField.clear();
            isbnField.clear();
            yearField.clear();
            availableCheckBox.setSelected(true);
        }
    }

    public Book getBookFromFields() {
        String title = titleField.getText();
        String author = authorField.getText();
        String isbn = isbnField.getText();
        int year = 0; // Default year
        boolean validYear = false;
        try {
            if (!yearField.getText().isEmpty()) {
                year = Integer.parseInt(yearField.getText());
                if (year > 0 && year <= LocalDate.now().getYear() + 5) { // Basic validation for year
                    validYear = true;
                } else {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Invalid Input");
                    alert.setHeaderText("Invalid Year Value");
                    alert.setContentText("Please enter a realistic year for the book.");
                    alert.showAndWait();
                    return null; // Indicate failure
                }
            } else {
                validYear = true; // Or make year mandatory
            }
        } catch (NumberFormatException e) {
            System.err.println("Invalid year format: " + yearField.getText());
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Invalid Input");
            alert.setHeaderText("Invalid Year Format");
            alert.setContentText("Year must be a number.");
            alert.showAndWait();
            return null; // Indicate failure
        }

        if (!validYear && !yearField.getText().isEmpty()) { // If parsing failed or validation failed and field was not empty
            // Error already shown by the catch block or validation
            return null;
        }

        boolean available = availableCheckBox.isSelected();

        // Basic validation for title
        if (title == null || title.trim().isEmpty()) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Invalid Input");
            alert.setHeaderText("Missing Title");
            alert.setContentText("Book title cannot be empty.");
            alert.showAndWait();
            return null; // Indicate failure
        }

        if (currentBook != null) { // Editing existing book
            currentBook.setTitle(title);
            currentBook.setAuthor(author);
            currentBook.setIsbn(isbn);
            currentBook.setYear(year);
            currentBook.setAvailable(available);
            return currentBook;
        } else { // Creating new book
            // ID will be auto-generated by DB, so pass 0 or handle appropriately in service
            return new Book(0, title.trim(), author.trim(), isbn.trim(), year, available);
        }
    }
}
